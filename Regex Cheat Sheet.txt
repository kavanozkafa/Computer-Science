
Regex       Meaning/Sample

*           repeats the previous expression 0 or more times. "Ah*" matches "Ahhh.." , "12*3" matches "13","12223".

?           matches 0 or 1 of the previous.makes the previous item optional."Ah?" matches "A" or "Ah","ma?ke" matches "mke","make"

+           repeats the previous expression 1 or more times."Ah+" matches "Ah" , "Ahhhhhhhh",vs.

\           used to escape a special character and turn it into an ordinary character."a\*c" matches "a*c".

.           matches any character except newline "\n" . "do." matches "dog","door".

()          grouping of characters or expression. (ak) matches "make","fake"."mon" matches "monkey","monday".

-           specifies a range of characters to match."a[0-9]c" matches "a1c","a6c".

[]          matches a range of characters. [a-zA-Z] matches any letter."[cbf]ar" matches "car" ,"bar", "far".

|           matches previous or next character or group of character."(Mon)|(Tues)day" matches "Monday" or "Tuesday".

{}          matches a specified number of occurness of the previous.
            [0-9]{3} matches "315" or "498" but not "12" or "6".must be 3 digit.
            [0-9]{2,4} matches 2 ,3 or 4 digit numbers.
            [0-9]{4,}  matches 4 or more digit numbers.
            "ab{3,5}c" matches "abbbc","abbbbc" or "abbbbbc".


^           matches from the beginning of the string. "^http" matches strings that begin http such as url.

$           matches from the end of the string. ing$ matches "Loving" but not "ingles".

[^..]       matches any character except for those that are defined in the bracket."a[^b]c" matches "aec","acc" but not "abc".

\b..\b      matches a word within the boundary."\bLive\b" matches Live in "Long Live The King".

(?:..)      non-capturing group .(a)b(?:c) captures 'c' but only groups of 'c'.

\0          null character

\a          matches a bell or alarm.

\b          word boundary.

\B          non word boundary.

\d          matches any decimal digit.

\D          matches any non-digit.

\e          matches an escape.

\r          matches a carriage return.

\t          matches a tab.

\s          matches space ."a\sc" matches "a c".

\S          matches non-space.

\v          matches a vertical tab.

\w          matches any one word character [a-zA-Z_0-9]

\W          matches any non-word character

\Z          end of string

\A          start of string

\<          start of word

\>          end of word

\x          hexadecimal digit

\O          octal digit



Assertions

?=              Lookahead assertion.

?!              Negative lookahead.

?<=             Lookbehind assertion.

?!= or ?<!      negative lookbehind.

?>              Once-only Subexpression

?()             Condition(if then)

?()|            Condition(if then else)

?#              Comment



POSIX

[:upper:]       upper case letters

[:lower:]       lower case letters

[:alpha:]       all letters

[:alnum:]       digits and letters

[:digit:]       digits

[:xdigit:]      hex digits

[:punct:]       punctuation and symbols

[:blank:]       space and tab

[:space:]       all whitespace characters, including line breaks

[:cntrl:]       control characters

[:graph:]       visible characters

[:print:]       visible characters and spaces (anything except control characters)

[:word:]        digits ,letters,underscore

In Java, [:punct:]  becomes \p{Punct} and all of them become same \p{word with upper case first letter }



Regular Expression Flags
Outside the regular expression (at the end) flags can be used to help with the pattern matching.

i       Ignore the case(upper or lower)
m       Multi-lines match
s       Match new lines
x       allow space and comments
J       Duplicate group names allowed
U       Ungreedy match

